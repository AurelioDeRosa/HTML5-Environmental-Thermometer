// HTML5 Meter polyfill | Jonathan Stipe | https://github.com/jonstipe/meter-polyfill

(function(){(function($){document.createElement('meter');$.fn.html5Meter=function(){var updatePolyfill;updatePolyfill=function(meterElem,meterBarDiv){var $meterBarDiv,$meterElem,amt,high,low,max,min,optimal,val,_ref;$meterElem=$(meterElem);$meterBarDiv=$(meterBarDiv);_ref=$([$meterElem.attr('min')||'0',$meterElem.attr('max')||'1.0',$meterElem.attr('value'),$meterElem.attr('high')||($meterElem.attr('max')||'1.0'),$meterElem.attr('low')||($meterElem.attr('min')||'0'),$meterElem.attr('optimum')]).map(function(){if(/^\-?\d+(?:\.\d+)?$/.test(this)){return parseFloat(this);}}).get(),min=_ref[0],max=_ref[1],val=_ref[2],high=_ref[3],low=_ref[4],optimal=_ref[5];if(val>max){val=max;}
if(val<min){val=min;}
amt=max>min?((val-min)/(max-min))*100.0:0;if(val>high){$meterBarDiv.addClass('meter-high');}else{$meterBarDiv.removeClass('meter-high');}
if(val<low){$meterBarDiv.addClass('meter-low');}else{$meterBarDiv.removeClass('meter-low');}
if(val===optimal){$meterBarDiv.addClass('meter-optimal');}else{$meterBarDiv.removeClass('meter-optimal');}
$meterBarDiv.css("width",amt+"%");return null;};$(this).filter('meter').each(function(){var $elem,attrMutationCallback,attrObserver,meterBarDiv,meterFrameDiv,_this=this;$elem=$(this);meterFrameDiv=document.createElement('div');meterBarDiv=document.createElement('div');meterFrameDiv.appendChild(meterBarDiv);$(meterFrameDiv).addClass('meter-frame');$(meterBarDiv).addClass('meter-bar');updatePolyfill(this,meterBarDiv);this.appendChild(meterFrameDiv);if((typeof WebKitMutationObserver!=="undefined"&&WebKitMutationObserver!==null)||(typeof MutationObserver!=="undefined"&&MutationObserver!==null)){attrMutationCallback=function(mutations,observer){var mutation,_i,_len,_ref;for(_i=0,_len=mutations.length;_i<_len;_i++){mutation=mutations[_i];if(mutation.type==="attributes"&&((_ref=mutation.attributeName)==="value"||_ref==="min"||_ref==="max"||_ref==="low"||_ref==="high"||_ref==="optimum")){updatePolyfill(_this,meterBarDiv);}}
return null;};attrObserver=(typeof WebKitMutationObserver!=="undefined"&&WebKitMutationObserver!==null)?new WebKitMutationObserver(attrMutationCallback):((typeof MutationObserver!=="undefined"&&MutationObserver!==null)?new MutationObserver(attrMutationCallback):null);attrObserver.observe(this,{attributes:true,attributeFilter:["value","min","max","low","high","optimum"]});}else if(typeof MutationEvent!=="undefined"&&MutationEvent!==null){$elem.on("DOMAttrModified",function(evt){var _ref;if((_ref=evt.originalEvent.attrName)==="value"||_ref==="min"||_ref==="max"||_ref==="low"||_ref==="high"||_ref==="optimum"){updatePolyfill(_this,meterBarDiv);}
return null;});}
return null;});return $(this);};$(function(){$('meter').html5Meter();return null;});return null;})(jQuery);}).call(this);